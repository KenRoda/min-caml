問１のみ解答のため、この.txtファイルのみで提出します
・自分たちのアーキテクチャについて
・他のアーキテクチャについて
1.PowerPC

幾つかのレジスタは、呼び出し前後で内容が変わらないことが約束となっている。(Callee-save)
Caller-saveなレジスタもある。
GPR11は、入れ子関数ではCallee-saveであり、それ以外ではCaller-saveである。
入れ子関数では、GPR11にスタックポインタが渡される。

MIPSよりも多くの引数用のレジスタがある。(GPR4-GPR10)
LR(Link Register)に、リターンアドレスが保存される。
参考URL
https://www.ibm.com/developerworks/library/l-ppc/
https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/LowLevelABI/100-32-bit_PowerPC_Function_Calling_Conventions/32bitPowerPC.html
2.MIPSのgccの規約を調べました。
以下がレジスタの表です
名称     番号   	用途	                     呼び出された側が内容を保存する必要があるか?
$zero	  $0	    常に 0	                    N/A
$at	    $1	    アセンブラが一時的に使用      	No
$v0–$v1	$2–$3 	関数の戻り値や式を評価した結果	 No
$a0–$a3	$4–$7 	関数の引数	                  No
$t0–$t7	$8–$15	一時変数	                   No
$s0–$s7	$16–$23	一時変数だがセーブされる	     Yes
$t8–$t9	$24–$25	一時変数	                  No
$k0–$k1	$26–$27	OSのカーネル用に予約	         No
$gp    	$28	    広域（グローバル）ポインタ	    Yes
$sp    	$29	    スタックポインタ	           Yes
$fp    	$30	    フレームポインタ	           Yes
$ra    	$31	    リターンアドレス	           N/A

$raはCaller-saveであり、$raにリターンアドレスを格納してから関数にジャンプする。
呼び出された側が内容を保存する必要があるか?がYesになっているレジスタは、
Calleeは呼び出し前後で同じにする必要がある。(Callee-save)

関数内で関数を呼び出すときには、$raをスタックに退避する。
参考URL
https://ja.wikipedia.org/wiki/MIPS%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3
http://www.swlab.cs.okayama-u.ac.jp/~nom/lect/p3/what-is-calling-convention.html
