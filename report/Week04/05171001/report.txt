問１のみ解答のため、この.txtファイルのみで提出します

-----自分たちのアーキテクチャについて-----
5班は現在、下のような規約で開発しています。
私ではなくコンパイラ係が決定したものです。
r0  ゼロレジスタ
r1~r25 整数引数をいれる (r1に返り値を格納)
r26 アセンブリの一時変数(swapなどで使用)
r27 クロージャ変数を格納するポインタ
r28 コンディションレジスタ(のようなもの)
r29 スタックポインタ
r30 ヒープポインタ
r31 リンクレジスタ(のようなもの)
f0~f31 浮動小数点引数をいれる

caller-saveを利用

r26はたとえば以下のように利用する
(swap)
%addi %r26, %r2, 0
%addi %r2,  %r1, 0
%addi %r1, %r26, 0

r28はコンディションを保存し、条件分岐の際はこのレジスタの値を見るが、すべての命令で更新されるレジスタではない

-----他の班のアーキテクチャについて-----
-----2班の関数呼び出し規約-----
r0  ゼロレジスタ
r１    スタックポインタ
r2  フレームポインタ(r1からr2の間が現在の関数のフレーム)
r3  ヒープポインタ(未使用のヒープの先頭)
r4  クロージャ変数のためのポインタ
r5,r6,r7,r8 一般レジスタとして使用。
r9~r32  いまのところ不使用

関数の引数は全てスタックに積んでおき、r2からの相対で参照することにしている
戻りアドレスは、すぐにlrから取り出してスタック上に保存しておき、返る際にスタックから取り出すことにしている
いまのところ、レジスタは全てcaller save
返り値はr5

この規約は、x86の呼び出し規約を基にしており、
r1  esp
r2  ebp
r3  esi
r4  edi
r5  eax
r6  ebx
r7  ecx
r8  edx
と対応している

-----既存のCPUの関数呼び出し規約-----
MIPSの規約を調べました。
以下がレジスタの表です
名称     番号   	用途	                     呼び出された側が内容を保存する必要があるか?
$zero	  $0	    常に 0	                    N/A
$at	    $1	    アセンブラが一時的に使用      	No
$v0–$v1	$2–$3 	関数の戻り値や式を評価した結果	 No
$a0–$a3	$4–$7 	関数の引数	                  No
$t0–$t7	$8–$15	一時変数	                   No
$s0–$s7	$16–$23	一時変数だがセーブされる	     Yes
$t8–$t9	$24–$25	一時変数	                  No
$k0–$k1	$26–$27	OSのカーネル用に予約	         No
$gp    	$28	    広域（グローバル）ポインタ	    Yes
$sp    	$29	    スタックポインタ	           Yes
$fp    	$30	    フレームポインタ	           Yes
$ra    	$31	    リターンアドレス	           N/A

jal命令により、$raにリターンアドレスを格納してから関数にジャンプすることになる。
呼び出された側が内容を保存する必要があるか?がYesになっているレジスタは、
Calleeは呼び出し前後で同じにする必要がある。(Callee-save)

関数内で関数を呼び出すときには、$raをスタックに退避する。
参考URL
https://ja.wikipedia.org/wiki/MIPS%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3
http://www.swlab.cs.okayama-u.ac.jp/~nom/lect/p3/what-is-calling-convention.html


-----類似点・相違点および利点/欠点を論ぜよ-----
引数の渡し方についてですが、5班とMIPSは引数用のレジスタを持っているのに対し、
2班は持っておらず、全てスタックに格納します。
2班の方法だと、通常の関数呼び出しも関数内で関数を呼ぶ時と同じようにできる利点がありますが、
その分オーバーヘッドが生じてしまいます。

また、2班と5班は全てがcaller-saveですが、MIPSはcallee-saveなレジスタも持っています。
これにより、MIPSは小さい関数やleaf関数を速く実行できるはずです。
