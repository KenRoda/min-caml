この.txtファイルのみでの提出です。
問1/2

let x = read_int () in
let y = (if x <= 0 then f 1 else 2) in
let z = (if y <= 3 then x - 4 else g 5) in
x - y - z

にsave/restoreを挿入すると、

let x = read_int () in
let y = save(x);(if x <= 0 then f 1 else 2) in
let z = save(y);restore(x);(if x <= 3 then x - 4 else g 5) in
restore(y);restore(x);x - y - z

となる。関数呼び出しが起こる可能性のある前に、生きている変数をsaveしている。
さらに、関数呼び出しの可能性の後にはrestoreする。

どうせ退避をするなら、定義の直後にした方がより良いため、下がより良い例である。
let x = read_int ();save(x) in
(let y = (if x <= 0 then f 1 else 2));save(y) in
let z = restore(x);(if x <= 3 then x - 4 else g 5) in
restore(y);restore(x);x - y - z

問2/2
以下のアッカーマン関数を考察する
let rec ack x y =
  if x=0 then
    y+1
  else if y=0 then
    ack (x-1) 1
  else
    ack (x-1) (ack x (y-1))

まず、手でK正規化すると、下のようになる。

let rec ack x y =
  if x=0 then
    let a = y + 1 in
      a
  else if y=0 then
    let b = x - 1 in
    let c = y - 1 in
      ack b c
  else
    let d = x - 1 in
    let e = y - 1 in
    let f = ack x e in
      ack d f


----悪い割当----
let rec ack R0 R1 =
  if R0 = 0 then
    save(y);(* y->R1 *)
    let R1 = R1 + 1 in
      R1 (* return *)
  else if R1=0 then
    save(x);(* x->R0 *)
    let R0 = R0 - 1 in
    save(y);(* y->R1 *)
    let R1 = R1 + 1 in
      save(b);(* b->R0 *)
      save(c);(* c->R1 *)
      ack R0 R1 (* return *)
  else
    save(x);(* x->R0 *)
    let R0 = R0 - 1 in
    save(y);(* y->R1 *)
    let R1 = R1 - 1 in
    save(d);(* d->R0 *)
    save(e);(* e->R1 *)
    restore(x);(* x->R0 *)
    ack R0 R1;
    let R1 = R0 in
      save(f);(* f->R1 *)
      restore(d);(* d->R0 *)
      ack R0 R1 (* return *)

上が悪い割当である。生存解析をせず、関数呼び出しの前、代入の前にsaveするようにしている。
restore回数が2に対し、過剰なsaveが行われている。

----良い割当----

let rec ack R0 R1 =
  if R0=0 then
    let R1 = R1 + 1 in
      R1
  else if R1=0 then
    let R0 = R0 - 1 in
    let R1 = R1 - 1 in
      ack R0 R1
  else
    save(x);(* x->R0 *)
    let R0 = R0 - 1 in
    let R1 = R1 - 1 in
    save(d);(* d->R0 *)
    restore(x);(* x->R0 *)
    ack R0 R1;
      let R1 = R0 in
      restore(d)(* d->R0 *)
        ack R0 R1

上が良い割当である。生存解析をして、関数呼び出しや代入の際、今後も必要になる変数のみsaveするようにした。
restore回数が2に対し、saveも2回になっている。
一般的に、回数について
restore >= save
となるべきだと思われる。それが満たされている。
